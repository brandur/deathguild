language: go

go:
  - "1.11"

# specified explicitly so we can we can get Postgres 9.5
dist: trusty

# faster container-based builds
sudo: false

addons:
  postgresql: "9.5"

before_install:
  - go get -u golang.org/x/lint/golint

install:
  - pip install --user awscli

before_script:
  - psql -U postgres -c 'CREATE DATABASE "deathguild";'
  - psql -U postgres -c 'CREATE DATABASE "deathguild-test";'

# Note we've changed the script with &&s so that all steps need to succeed
# before the next command is issued. The only exceptions are the enrich-songs
# and create-playlist steps, which are allowed to fail so that Spotify's
# draconian rate limits can't interfere with the build process to too great of
# a degree.
#
# Note that many build steps depend on the presence of a Postgres database to
# work. We fetch the latest state of our database from S3 when the build
# begins, load it into an ephemeral Travis-based Postgres, and then dump its
# state after the build finishes. If this is the master branch, the new state
# will be put back into S3 during the deployment step so that the next build
# can access it.
#
# Use very low concurrency (= 1) for commands that need to talk to Spotify.
script:
  - mkdir $TARGET_DIR &&
    make &&
    make database-fetch &&
    make database-decompress &&
    make database-restore &&
    make scrape-playlists &&
    CONCURRENCY=1 make enrich-songs

  - CONCURRENCY=1 make create-playlists

  - make database-dump &&
    make database-compress &&
    rm -f public/deathguild.sql &&
    make build-site &&
    make deploy-site

notifications:
  email:
    on_success: never

env:
  global:
    - DATABASE_URL=postgres://localhost/deathguild?sslmode=disable
    - GOOGLE_ANALYTICS_ID=UA-47798518-2
    - S3_BUCKET=deathguild-playlists
    - SPOTIFY_USER=deathguild-playlists
    - TARGET_DIR=./public
    - TEST_DATABASE_URL=postgres://localhost/deathguild-test?sslmode=disable

    # Variables in this section are secret and encrypted with something like:
    #
    #     travis encrypt CLIENT_ID=...
    #
    # Note that their actual values are only available on builds on the master
    # branch which means that we'll only ever update Spotify or deploy when
    # changes appear there. The make tasks in our build steps are gated so that
    # they're smart enough to just fall through if the secrets that they need
    # to run are not available (for example, `make create-playlists` looks for
    # a Spotify `$REFRESH_TOKEN`).

    # $AWS_ACCESS_KEY_ID
    - secure: "RUl/y5seL6VDaq2mfPdhoqcy5SQnWUNJVQ3gVuRQR1MIUsgzj/xv7SjNtZYgoEiMtXvf80yUZadId8IBHZNKRIWjQQoNuTX67WcmzWOjp8n2a+DnntnewgJPHLk056KrOMbqsziLlEG83D1O9CHBTzZN5snSrn451HfajjyPvGueek8g4XxjQvtADQK2oI/mxf5Dv3FFnt/DslsiBiggKoxywRxg2pg9tuVV3bwiQmVotf+o79Qx5i0yaX6TQQv0oT2FvQVHGFA24UJMasLybbx65cWqD6MRVhCbsapD8Qg+ek12Oc4nkwEiAwohkP8a7Bt0i4nxBP1OZTPSJ07Lr8QNpHQrdlZH/69Cdg+f8Wgk8LJBMny753Kn3jodUTIyeu8wd5z/yXodm+CQSAS69BUCONf7dNE6RH3GiHKjhJYmbN7YROu3LRnH96eku2SqKLM0cJgDUTL+BxawnWWuwy2oD25BkoSHgNGZK4wOfTAo6PcjWdTOarcD3g/7T6C82C0b5Ag+Nwyf6XoiJHeGeANwbCke2m6ZidPixBkjJTZ5nc5wOJ7DtgpZ+OvKFE1do05BWG9Rlg5Zg6tmdrHvcxm1KZcCMd5Uf5lPh8/STZGfrqD1hCxy9tmJIBV8SmGz3xgV7/89lHR03hMrA5MEgVvC37LREM76R7HLYRS+u88="

    # $AWS_SECRET_ACCESS_KEY
    - secure: "c1bqV828vUPa3U62MPGLtY1XryUnWuMe5jMpzvHgajeexqpw5Fi0SYXtN4CUTUjcXEQrgzb41mlwXUXJQFdeF16JLk0JUUedDMVnnNuFC7CT98h/lEAk6M0qEGHx3iT+rfdLlqT5KyLLK3yQGD19H6TUJGoYPNbq42x3zVqg/pBSiGDfOak6idgvDWVrzGOEPIQn9iiUYIYIwlgb6lgMboVY2zg6izuhxedI2gwit/dOtam7yT87jShqz0qMuNq0ZTJGyvyUEUFvz3Ni1qKbqCur6EsRZ/tNTh4oU7pAI827Wcnzfb/5v267xVZNTqSw3KMrl5OyaYvuXpGii0xNajWHTAcx5wZzjNBbOwxbYE57YG3lx+IflD69zF7cCwL2vqOs9L+qPVQQHUx1op7GMd6ulI5Cp43+XcB5HWQ4c4DMCthWZbcRMEBzmwB/l3BlCaMXNehNEFFtn3GOz2fXXWykCdZlFRQ2QhQR0fMp/9d6R5nefi9It8AzJwj88u1u0Cc9PPcwTxpEYlqgCiXnItSQQ8jqpXDOzlB+UpAcf1Bi9OQM2nDDkh/PZiSPUSx5kEJA08VKVTWz54a7UoE3gIXZU2TF0075G9Nsufjo06nyOPei6CYgpIMR8svVCBojpLRoWXUgdhup1Et4yEp91TjfXj1eX1b9LupBEGjU5OE="

    # $CLIENT_ID
    - secure: "utU8Q4vvGKhIVJOa0i64p+RT1rt8vHZe72CPIKyf0B+JZBQcpYiZteOVi2OI6nqF4WeoGW+2FyU7gSn7w7bJBY4jHdMK95iEjGxoCkylIkKuxYDmv9xjOlS/we2M+kJvcohYebDx/b41W1vGko2vQ1yX5JrglsD+Z59gMbyCQKGBu1a4kiRFSi8ebSKGJzauQ8pTgQg+3lf6SOmoOwKMxrnHNEZjVEVOJ/udbyIF/Fgf4UN2YBDVjfQwQcAT2TH6bAglA6Ru/z8VBqMJX3LYPVqyFC9TecSFTjytPxKDxARcoXj7nkDU/KsGTjYkN30fHHCFr3YGB6CUTrFJhyeAFUeNMKsFJ7iHiZOXLHh8S88YcncX21TdZKM4ZkkWqcbGGHBG5xRMibV/bti9JX2LNIv19VM7i5iDXEiqYJZgzVZYI9tE7RlH1lwomQf+nAcYUnqxF61ekmCasA+DYIqsq+dRewKoeuFm8zqJ7Gvbf7hTps79lfD+8cdm9OSmPjpq/rLw3NV0VRm6drADqBuc83ZfWT2hxbwvfhNN9Qm4mCcI4tiFT3YC00/W3UNIUpuzv5pI3/kqKHifxMa8v5QulkxBIlQuhhNpS/sfzrhAXXQNNaB88nD9GwI/e5DNm8IzeLeWgUBLCmPC7k6OyJ3iC8wGqSg2h2HtdoG6nTNPmgw="

    # $CLIENT_SECRET
    - secure: "I0nME8wNPXmAEyI/yc1I+/HXdNfrxbltM6p4I6h8dgpaRssOWA87HKWt/McZZ4dj6LpxK7y/QsgGXbnMsy/8kUuhsGdyh4GhQbYG7i1z9i0ecND6ycB1Ib+dwyrVcFd44Y2c+0tu9FtfDLpC4tiOteEyjeWkjaZcu56Xy8MG39xqVKw3iJlP2ZOzoDcYHXiuPQH4wHecJdl4KWYa93oEtXu4GxwqKZXXxFn4UOrImreMGsqwGwpHkHLlWVHTyz7GgXPzStszkzgMh5eGudEIkeAieKas4dvTUgsUb4aoxfdJq4Jj+JFtKoyCFN/pt6RTcyt+CuEB64TOM3+qhBj8c2ppyTRc7P2ok95sE5R32D8C78FrhPHqqEol3jbe/ghAvZ5LX1gqGddRUDBz2DPThX+HfV01t6ufWcrvTJTRchtXbXxPUz+H1yoCTlLiVBWSRy8fuuFGD/yspJSYFJ2QyqL41YG+siWuOyNaK3Md8y7Ju1ld2xTnMf2A5lfnT5oBRmj7RORMz99Ryrtyy7/0mC3USTGIKFsm0LD5GI04XgZ3HVlx1UCTkCi+WwQvnERt/dATiJD83yvWROZFgZdxoAMLxwob25MrdmRZx4BTG/DfjWxRRVJpERqOhLNA0mYC7k93L3NSf//rpJtJ+HdDD4I9xEagVKhHdyaIa05iGVs="

    # $REFRESH_TOKEN
    - secure: "gNUVolOHIYwk36bZeQCgHEuHKDcO1Hsv1opNEn1sAX26FBQKyZCvgO7BCOKWWC0HW/DA4C5E+8m7kl2PL1wD88pUUz2pe/G6CvUj4viN0T9jhkl6ABhu4EqtmEKKdqkMANPYlgTED+FsBTEY0zdsvpvkZDx6qwg2uIQXnAnAZQXXFt+oaANNsl0GmrJQ7I3klS7XAjDB/5vklXesnCjdQIaIoAVrvBnkzLuAduAQJADla7q5Yq7gf4jkl773LfUmOclBNhi9rpCmEBrj5tUHqFxqaf3ZhFvD1I8+Er7cpHgcs4PDWQWYgyd6qYEc/CVCR5PN/JBQO5eXT0foAAqV7Zxdw2BE/luOa1D2C3pozkwJ85ZJeY17rbM2RY+ioMi05Jy1+hak865Kf6kZRxJLxr4sF/yyanPEvhonySvwXDBSe6Wmv7CUj+kecshYLEWS2QkhEhNbpAEwIEZA0kB33tPIoiDvJv1Rc8CKmpVjnz4KwtTJPUtM41zKcVJnG8qK0tdbcU11YB29NF/POMvP3k2obQ80uZuVB+MJNyECYsxwUUDWf3ldb1p/idH8iILBwD6hlk3NS1jcdSYkqrnyRHTMnIbkzjgITMfru02WzK34FM/zxCLunnxkV0Ohv5IDhLWWsB5ogUGTzEAQHYAkOJeMkEPsPbUeWsR3ayFhFOQ="
