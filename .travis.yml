language: go

go:
  - 1.7

# specified explicitly so we can we can get Postgres 9.5
dist: trusty

# Changed to "required" so we can get access to Postgres 9.5, which is not
# available in container environments (see travis-ci/travis-ci#4264). This will
# result in slower builds so we should changed back to "false" as soon as it's
# possible to do so.
sudo: required

addons:
  postgresql: "9.5"

before_install:
  - go get -u github.com/golang/lint/golint

install:
  - pip install --user awscli

before_script:
  - psql -U postgres -c 'CREATE DATABASE "deathguild";'
  - psql -U postgres -c 'CREATE DATABASE "deathguild-test";'

# Note we've changed the script with &&s so that all steps need to succeed
# before the next command is issued.
#
# Note that many build steps depend on the presence of a Postgres database to
# work. We fetch the latest state of our database from S3 when the build
# begins, load it into an ephemeral Travis-based Postgres, and then dump its
# state after the build finishes. If this is the master branch, the new state
# will be put back into S3 during the deployment step so that the next build
# can access it.
script:
  - mkdir $TARGET_DIR &&
    make &&
    make database-fetch &&
    make database-restore &&
    make scrape &&
    make enrich-songs &&
    make create-playlists &&
    make database-dump &&
    make build &&
    make deploy

notifications:
  email:
    on_success: never

env:
  global:
    - DATABASE_URL=postgres://localhost/deathguild?sslmode=disable
    - S3_BUCKET=deathguild-playlists
    - TARGET_DIR=./public
    - TEST_DATABASE_URL=postgres://localhost/deathguild-test?sslmode=disable

    # Variables in this section are secret and encrypted with something like:
    #
    #     travis encrypt CLIENT_ID=...
    #
    # Note that their actual values are only available on builds on the master
    # branch which means that we'll only ever update Spotify or deploy when
    # changes appear there. The make tasks in our build steps are gated so that
    # they're smart enough to just fall through if the secrets that they need
    # to run are not available (for example, `make create-playlists` looks for
    # a Spotify `$REFRESH_TOKEN`).

    # $AWS_ACCESS_KEY_ID
    - secure: "RUl/y5seL6VDaq2mfPdhoqcy5SQnWUNJVQ3gVuRQR1MIUsgzj/xv7SjNtZYgoEiMtXvf80yUZadId8IBHZNKRIWjQQoNuTX67WcmzWOjp8n2a+DnntnewgJPHLk056KrOMbqsziLlEG83D1O9CHBTzZN5snSrn451HfajjyPvGueek8g4XxjQvtADQK2oI/mxf5Dv3FFnt/DslsiBiggKoxywRxg2pg9tuVV3bwiQmVotf+o79Qx5i0yaX6TQQv0oT2FvQVHGFA24UJMasLybbx65cWqD6MRVhCbsapD8Qg+ek12Oc4nkwEiAwohkP8a7Bt0i4nxBP1OZTPSJ07Lr8QNpHQrdlZH/69Cdg+f8Wgk8LJBMny753Kn3jodUTIyeu8wd5z/yXodm+CQSAS69BUCONf7dNE6RH3GiHKjhJYmbN7YROu3LRnH96eku2SqKLM0cJgDUTL+BxawnWWuwy2oD25BkoSHgNGZK4wOfTAo6PcjWdTOarcD3g/7T6C82C0b5Ag+Nwyf6XoiJHeGeANwbCke2m6ZidPixBkjJTZ5nc5wOJ7DtgpZ+OvKFE1do05BWG9Rlg5Zg6tmdrHvcxm1KZcCMd5Uf5lPh8/STZGfrqD1hCxy9tmJIBV8SmGz3xgV7/89lHR03hMrA5MEgVvC37LREM76R7HLYRS+u88="

    # $AWS_SECRET_ACCESS_KEY
    - secure: "c1bqV828vUPa3U62MPGLtY1XryUnWuMe5jMpzvHgajeexqpw5Fi0SYXtN4CUTUjcXEQrgzb41mlwXUXJQFdeF16JLk0JUUedDMVnnNuFC7CT98h/lEAk6M0qEGHx3iT+rfdLlqT5KyLLK3yQGD19H6TUJGoYPNbq42x3zVqg/pBSiGDfOak6idgvDWVrzGOEPIQn9iiUYIYIwlgb6lgMboVY2zg6izuhxedI2gwit/dOtam7yT87jShqz0qMuNq0ZTJGyvyUEUFvz3Ni1qKbqCur6EsRZ/tNTh4oU7pAI827Wcnzfb/5v267xVZNTqSw3KMrl5OyaYvuXpGii0xNajWHTAcx5wZzjNBbOwxbYE57YG3lx+IflD69zF7cCwL2vqOs9L+qPVQQHUx1op7GMd6ulI5Cp43+XcB5HWQ4c4DMCthWZbcRMEBzmwB/l3BlCaMXNehNEFFtn3GOz2fXXWykCdZlFRQ2QhQR0fMp/9d6R5nefi9It8AzJwj88u1u0Cc9PPcwTxpEYlqgCiXnItSQQ8jqpXDOzlB+UpAcf1Bi9OQM2nDDkh/PZiSPUSx5kEJA08VKVTWz54a7UoE3gIXZU2TF0075G9Nsufjo06nyOPei6CYgpIMR8svVCBojpLRoWXUgdhup1Et4yEp91TjfXj1eX1b9LupBEGjU5OE="

    # $CLIENT_ID
    - secure: "k3pkt+grg6HQ5kc1T3SIVpBCA0Ct29ufZE9NHKi9eNpS6G5cO3ZOefb/uFxHFZ7YEWJXCau8ofd2wgjUpOnxmVkbQavFCzDGRO30zqqhsKNcmLxx6ytCTYGVLRCkKsSZ4/32mQfyl9zFCyBISc9JB5JUZR0kk+exZhN3LNdrN8Ny3vSc/aJ0O64/W4Q+EnTQHAPv2UcanlITb8EwD4ffwkB/bFi8Y//3tsUB4MEXQIK4AP+MGB9/RvQAStRyZDkT/LV9Ddzlxfz0R8Ql9TV1fmxSUk10pCebDNjX9OXQ5819vPhhVZKqllUyDdEG+4/cd6eZVFQ89i7mcRUxdid25+FyLMI4O+8RItrY4jmstOj7u9q+jjtHdre250tA7WkKGZEvawcA9iHB12btQl3csWc71o2O/UAPZi0Kdvx+866hOp3mC3PwU0Nj8oFCkjwXGaCVP/eD9QCBb7ZoCLPm51oeB0mgRbsfGbCe+P9ki0ajf6uf2ZD1nIKOnoeJp7f7L+Q0SwU/njgtTTXa2FYddIaGiEXp4OxpBXIM63tRRmOLFdIiP9kWkH8WOsY9KYMWyCHz3spbBRawApw3LBaz9Pqoa5yIqrd3rN/NhDUp913XK2mU64I0LSEVEAw3PjX2w3ghEr9uPlZzYYOGx9QrlCFi6O+r+mKihFVtX2xzyUc="

    # $CLIENT_SECRET
    - secure: "BSxGvCbpr9mP6u5ePE3K9T+HakDBpTkJ/GNRDfvEn2Oe5wZ1xO1RjWdP2LNBDGIQOIBBWugfbJP+xdTc2yNGLVJ7Po2iAI35BMZxH+kdIpoF9+63+B7lZTbT9ii2bXWBgjaqMKbHnaWLiLOsGZL/l3N07ytcetZsLwiqInYBrHomIM+BIME9m6cAE2Eo01/cSAANeEEvqpc4PRsBLyXZe0QJJBJyjiOy856jcNnTnUyqoNl+UQVnYYGMvcmFTOZJTPqOVo4e1UIuOsSj5IV1c+KTfL3pLjMXvajUHtc/gJ40YeSwW+w4u2PZSV41ANveSNPpA+cxFLfTCDi7J5oTBmqm4IzbGtEtYP2wM1ZYzbh76m+7ke+47kmlS6hORtdatJR8h7nRA7MEZ7OiBhA1nFw/oQjMQs+k93UEFx/PxBH2bG8BPNkc9aFtbahYMqex2AGufSzAJkT9ElCGAvMVLM+DIDD8781hwCUGoHxZJBhvdWonx2+tWyE4H+AfLgmh1p4ppOZ5Rk718q/6BEqwec2s+OcgxagkBnwdj/OiNpu2Y5kSr7dCaKI/ty9kxMhPMy/m+8mpp3688+WJH97SpNQ/Rkun1Wc67Gj7hkffHItmrqpbAolqWqXbF2TZQYHki2S2oni5BsSrubKLF/sr4ObSA4S3F95FfbCEN1/J31o="

    # $REFRESH_TOKEN
    - secure: "sjg4v85fo63uQhW07GLcEOY0cR5wiicXsuhg80q6hno5gElRo3CztOpjMY5d4+Q4W5AB8ciQkXCkJUwj2KPvgppXXAyR4+CHXQhUau7Prht+qEF2UJ3LGb8LVtUFKYH8j1AjEikW2AgFtatQLcsB1N46NKwDJNqQ+E7eH+z73ixOc52F7wRaVDfYCcu1gmq4bicovir4S+dpioyV0tKXWNnY4KbTGr9CGnq5MzAIrWa3MY418fERzqyrGpT1PEiL4Yun4iqPuzUW54HQAmWGsDBkfyL9rQD3EIs8E0qvw6MAcWGt8YDWsUWh1QT8xWFRPsPnLd4FnoFmg6oEDIrnI/wKyyv3GJULLev0p403P6JIXZhu9Gc+9nPRvejcwrvP6/7GSUhJWe47ovidtx3hmqzttanmtXVH/HXTeyF6Ci5+gzrPUo8SmK3YjIM5S7vnTUnbsHk7yDuQP2EOR0CcEHpgD3yuAN8ugUt+O53RpUWoQrRXl/GuKYqvVAM3eoXNOPgthiU3valaP5lAGymii9ATN7tetMKiqM4zQAGcdO6OGyi2iVnw0i7mNI37O7crhExKrNq5rS3KMkyaGJBiBU/RArEwl+zAK2z0Tn8ERV619LM33Vh159Nh/xdYW0AxI+94G3qGzbgkrpOZfmanKpplBDXdG+00Yabqf6bf0Zg="
